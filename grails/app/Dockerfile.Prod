# Prod image

# Build step ==========================
FROM openjdk:8-jre-alpine as builder

# Set Grails version and user configs
ARG GRAILS_VERSION=3.3.4

ARG UNAME=user
ARG UID=1000
ARG GID=1000

# Update alpine so wget works with https and to add the groupadd and useradd commands
RUN apk update
RUN apk add ca-certificates
RUN update-ca-certificates
RUN apk add shadow

# Instal Grails
WORKDIR /usr/lib/jvm

RUN wget https://github.com/grails/grails-core/releases/download/v$GRAILS_VERSION/grails-$GRAILS_VERSION.zip && \
    unzip grails-$GRAILS_VERSION.zip && \
    rm -rf grails-$GRAILS_VERSION.zip && \
    ln -s grails-$GRAILS_VERSION grails

ENV GRAILS_HOME /usr/lib/jvm/grails
ENV PATH $GRAILS_HOME/bin:$PATH

# Define the code and cache folders
RUN mkdir /app
RUN mkdir /cache
ENV GRADLE_USER_HOME /cache

# Create a new user with the UID and GID provided by the docker-compose file,
# or use 1000 as default if nothing was provided
RUN groupadd -g $GID $UNAME &&\
    useradd -u $UID -g $UNAME -d /home/$UNAME -s /sbin/nologin -c "Docker image user" $UNAME

# Download dependencies
# Create a new project and copies the build.gradle file so this step is cached unless dependencies change
WORKDIR /app
RUN grails create-app --inplace app --profile rest-api --features hibernate5

RUN chown -R $UNAME:$UNAME /app
RUN chown -R $UNAME:$UNAME /cache

USER $UNAME

WORKDIR /app
COPY build.gradle /app/
RUN grails dependency-report

# KEEP EVERYTHING UNTIL THIS STEP THE SAME ON BOTH DOCKERFILES SO EVERYTHING IS CACHED ============
# Compiles the app
COPY . /app
RUN grails war
RUN mv /app/build/libs/*.war /app/build/libs/app.war


# Running step ========================
FROM openjdk:8-jre-alpine as runner

EXPOSE 8080

# Set user configs
ARG UNAME=user
ARG UID=1000
ARG GID=1000

# Update alpine to add the groupadd and useradd commands
RUN apk update
RUN apk add shadow

# Create a new user with the UID and GID provided by the docker-compose file,
# or use 1000 as default if nothing was provided
RUN groupadd -g $GID $UNAME &&\
    useradd -u $UID -g $UNAME -d /home/$UNAME -s /sbin/nologin -c "Docker image user" $UNAME

# Copy the file compiled at building step to the running container
RUN mkdir /build
COPY --from=builder /app/build/libs/* /build/

RUN chown -R $UNAME:$UNAME /build
USER $UNAME

# Execute the app
CMD ["java", "-jar", "/build/app.war"]
